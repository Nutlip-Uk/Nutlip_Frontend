'use client';
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var tailwindMerge = require('tailwind-merge');
var react = require('@uploadthing/dropzone/react');
var shared = require('@uploadthing/shared');
var buttonClient = require('./button-client-Nk-dYuI_.cjs');

function UploadDropzone(props) {
    // Cast back to UploadthingComponentProps<TRouter> to get the correct type
    // since the ErrorMessage messes it up otherwise
    const $props = props;
    const fileRouteInput = "input" in $props ? $props.input : undefined;
    const { mode = "manual", appendOnPaste = false } = $props.config ?? {};
    const acRef = React.useRef(new AbortController());
    const useUploadThing = buttonClient.INTERNAL_uploadthingHookGen({
        url: shared.resolveMaybeUrlArg($props.url)
    });
    const [files, setFiles] = React.useState([]);
    const [uploadProgressState, setUploadProgress] = React.useState($props.__internal_upload_progress ?? 0);
    const uploadProgress = $props.__internal_upload_progress ?? uploadProgressState;
    const { startUpload, isUploading, permittedFileInfo } = useUploadThing($props.endpoint, {
        signal: acRef.current.signal,
        headers: $props.headers,
        skipPolling: !$props?.onClientUploadComplete ? true : $props?.skipPolling,
        onClientUploadComplete: (res)=>{
            setFiles([]);
            void $props.onClientUploadComplete?.(res);
            setUploadProgress(0);
        },
        onUploadProgress: (p)=>{
            setUploadProgress(p);
            $props.onUploadProgress?.(p);
        },
        onUploadError: $props.onUploadError,
        onUploadBegin: $props.onUploadBegin,
        onBeforeUploadBegin: $props.onBeforeUploadBegin
    });
    const uploadFiles = React.useCallback(async (files)=>{
        await startUpload(files, fileRouteInput).catch((e)=>{
            if (e instanceof shared.UploadAbortedError) {
                void $props.onUploadAborted?.();
            } else {
                throw e;
            }
        });
    }, [
        $props,
        startUpload,
        fileRouteInput
    ]);
    const { fileTypes, multiple } = shared.generatePermittedFileTypes(permittedFileInfo?.config);
    const onDrop = React.useCallback((acceptedFiles)=>{
        $props.onDrop?.(acceptedFiles);
        $props.onChange?.(acceptedFiles);
        setFiles(acceptedFiles);
        // If mode is auto, start upload immediately
        if (mode === "auto") void uploadFiles(acceptedFiles);
    }, [
        $props,
        mode,
        uploadFiles
    ]);
    const isDisabled = (()=>{
        if ($props.__internal_dropzone_disabled) return true;
        if ($props.disabled) return true;
        return false;
    })();
    const { getRootProps, getInputProps, isDragActive, rootRef } = react.useDropzone({
        onDrop,
        multiple,
        accept: fileTypes ? shared.generateClientDropzoneAccept(fileTypes) : undefined,
        disabled: isDisabled
    });
    const ready = $props.__internal_ready ?? ($props.__internal_state === "ready" || fileTypes.length > 0);
    const onUploadClick = async (e)=>{
        if (state === "uploading") {
            e.preventDefault();
            e.stopPropagation();
            acRef.current.abort();
            acRef.current = new AbortController();
            return;
        }
        if (mode === "manual" && files.length > 0) {
            e.preventDefault();
            e.stopPropagation();
            await uploadFiles(files);
        }
    };
    React.useEffect(()=>{
        const handlePaste = (event)=>{
            if (!appendOnPaste) return;
            if (document.activeElement !== rootRef.current) return;
            const pastedFiles = shared.getFilesFromClipboardEvent(event);
            if (!pastedFiles?.length) return;
            let filesToUpload = pastedFiles;
            setFiles((prev)=>{
                filesToUpload = [
                    ...prev,
                    ...pastedFiles
                ];
                $props.onChange?.(filesToUpload);
                return filesToUpload;
            });
            $props.onChange?.(filesToUpload);
            if (mode === "auto") void uploadFiles(filesToUpload);
        };
        window.addEventListener("paste", handlePaste);
        return ()=>{
            window.removeEventListener("paste", handlePaste);
        };
    }, [
        uploadFiles,
        $props,
        appendOnPaste,
        mode,
        fileTypes,
        rootRef,
        files
    ]);
    const getUploadButtonContents = ()=>{
        const customContent = shared.contentFieldToContent($props.content?.button, styleFieldArg);
        if (customContent) return customContent;
        if (state === "readying") {
            return "Loading...";
        } else if (state === "uploading") {
            if (uploadProgress === 100) {
                return /*#__PURE__*/ jsxRuntime.jsx(buttonClient.Spinner, {});
            } else {
                return /*#__PURE__*/ jsxRuntime.jsxs("span", {
                    className: "z-50",
                    children: [
                        /*#__PURE__*/ jsxRuntime.jsxs("span", {
                            className: "block group-hover:hidden",
                            children: [
                                uploadProgress,
                                "%"
                            ]
                        }),
                        /*#__PURE__*/ jsxRuntime.jsx(buttonClient.Cancel, {
                            className: "hidden size-4 group-hover:block"
                        })
                    ]
                });
            }
        } else {
            // Default case: "ready" or "disabled" state
            if (mode === "manual" && files.length > 0) {
                return `Upload ${files.length} file${files.length === 1 ? "" : "s"}`;
            } else {
                return `Choose File${multiple ? `(s)` : ``}`;
            }
        }
    };
    const styleFieldArg = {
        fileTypes,
        isDragActive,
        isUploading,
        ready,
        uploadProgress
    };
    const state = (()=>{
        if ($props.__internal_state) return $props.__internal_state;
        if (isDisabled) return "disabled";
        if (!ready) return "readying";
        if (ready && !isUploading) return "ready";
        return "uploading";
    })();
    return /*#__PURE__*/ jsxRuntime.jsxs("div", {
        className: tailwindMerge.twMerge("mt-2 flex flex-col items-center justify-center rounded-lg border border-dashed border-gray-900/25 px-6 py-10 text-center", isDragActive && "bg-blue-600/10", $props.className, shared.styleFieldToClassName($props.appearance?.container, styleFieldArg)),
        ...getRootProps(),
        style: shared.styleFieldToCssObject($props.appearance?.container, styleFieldArg),
        "data-state": state,
        children: [
            shared.contentFieldToContent($props.content?.uploadIcon, styleFieldArg) ?? /*#__PURE__*/ jsxRuntime.jsx("svg", {
                xmlns: "http://www.w3.org/2000/svg",
                viewBox: "0 0 20 20",
                className: tailwindMerge.twMerge("mx-auto block h-12 w-12 align-middle text-gray-400", shared.styleFieldToClassName($props.appearance?.uploadIcon, styleFieldArg)),
                style: shared.styleFieldToCssObject($props.appearance?.uploadIcon, styleFieldArg),
                "data-ut-element": "upload-icon",
                "data-state": state,
                children: /*#__PURE__*/ jsxRuntime.jsx("path", {
                    fill: "currentColor",
                    fillRule: "evenodd",
                    d: "M5.5 17a4.5 4.5 0 0 1-1.44-8.765a4.5 4.5 0 0 1 8.302-3.046a3.5 3.5 0 0 1 4.504 4.272A4 4 0 0 1 15 17H5.5Zm3.75-2.75a.75.75 0 0 0 1.5 0V9.66l1.95 2.1a.75.75 0 1 0 1.1-1.02l-3.25-3.5a.75.75 0 0 0-1.1 0l-3.25 3.5a.75.75 0 1 0 1.1 1.02l1.95-2.1v4.59Z",
                    clipRule: "evenodd"
                })
            }),
            /*#__PURE__*/ jsxRuntime.jsxs("label", {
                className: tailwindMerge.twMerge("relative mt-4 flex w-64 cursor-pointer items-center justify-center text-sm font-semibold leading-6 text-gray-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-blue-600 focus-within:ring-offset-2 hover:text-blue-500", ready ? "text-blue-600" : "text-gray-500", shared.styleFieldToClassName($props.appearance?.label, styleFieldArg)),
                style: shared.styleFieldToCssObject($props.appearance?.label, styleFieldArg),
                "data-ut-element": "label",
                "data-state": state,
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx("input", {
                        className: "sr-only",
                        ...getInputProps()
                    }),
                    shared.contentFieldToContent($props.content?.label, styleFieldArg) ?? (ready ? `Choose files or drag and drop` : `Loading...`)
                ]
            }),
            /*#__PURE__*/ jsxRuntime.jsx("div", {
                className: tailwindMerge.twMerge("m-0 h-[1.25rem] text-xs leading-5 text-gray-600", shared.styleFieldToClassName($props.appearance?.allowedContent, styleFieldArg)),
                style: shared.styleFieldToCssObject($props.appearance?.allowedContent, styleFieldArg),
                "data-ut-element": "allowed-content",
                "data-state": state,
                children: shared.contentFieldToContent($props.content?.allowedContent, styleFieldArg) ?? shared.allowedContentTextLabelGenerator(permittedFileInfo?.config)
            }),
            /*#__PURE__*/ jsxRuntime.jsx("button", {
                className: tailwindMerge.twMerge("group relative mt-4 flex h-10 w-36 cursor-pointer items-center justify-center overflow-hidden rounded-md border-none text-base text-white after:transition-[width] after:duration-500 focus-within:ring-2 focus-within:ring-blue-600 focus-within:ring-offset-2", state === "disabled" && "cursor-not-allowed bg-blue-400", state === "readying" && "cursor-not-allowed bg-blue-400", state === "uploading" && `bg-blue-400 after:absolute after:left-0 after:h-full after:bg-blue-600 after:content-[''] ${buttonClient.progressWidths[uploadProgress]}`, state === "ready" && "bg-blue-600", "disabled:pointer-events-none", shared.styleFieldToClassName($props.appearance?.button, styleFieldArg)),
                style: shared.styleFieldToCssObject($props.appearance?.button, styleFieldArg),
                onClick: onUploadClick,
                "data-ut-element": "button",
                "data-state": state,
                type: "button",
                disabled: $props.__internal_button_disabled ?? !files.length,
                children: getUploadButtonContents()
            })
        ]
    });
}

exports.UploadDropzone = UploadDropzone;
